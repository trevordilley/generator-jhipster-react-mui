<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%#
TODO: MUI
-%>
import React, { useState, useEffect } from 'react';
import { connect } from 'react-redux';
import { Link, RouteComponentProps } from 'react-router-dom';
import { Button, Grid, Label, TextField, FormGroup, Typography } from '@material-ui/core'
import { Translate, translate } from 'react-jhipster';
import { FontAwesomeIcon } from '@fontawesome/react-fontawesome';

<%_ if (enableTranslation) { _%>
import { locales, languages } from 'app/config/translation';
<%_ } _%>
import { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';
import { IRootState } from 'app/shared/reducers';

export interface IUserManagementUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}

export const UserManagementUpdate = (props: IUserManagementUpdateProps) => {
  const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.login);

  useEffect(() => {
    if (isNew) {
      props.reset();
    } else {
      props.getUser(props.match.params.login);
    }
    props.getRoles();
    return () => props.reset();
  }, []);

  const handleClose = () => {
    props.history.push('/admin/user-management');
  };

  const saveUser = (event, values) => {
    if (isNew) {
      props.createUser(values);
    } else {
      props.updateUser(values);
    }
    handleClose();
  };

  const isInvalid = false;
  const { user, loading, updating, roles } = props;

  return (
    <div>
      <Grid container className="justify-content-center">
        <Grid item md={8}>
          <Typography variant="h1">
            <Translate contentKey="userManagement.home.createOrEditLabel">Create or edit a User</Translate>
          </Typography>
        </Grid>
      </Grid>
      <Grid container className="justify-content-center">
        <Grid item md={8}>
        { loading ? <p>Loading...</p>
        : <form onSubmit={saveUser}>
          {user.id ? (
              <TextField
                      className="form-control"
                      name="id"
                      required
                      disabled
                      value={user.id}
                      label={ translate ("global.field.id") }
              />
          ) : null}
            <Label for="login">
            </Label>
            <TextField
              className="form-control"
              name="login"
              required
              value={user.login}
              label={ translate("userManagement.login") }
            />
            <TextField
              className="form-control"
              name="firstName"
              value={user.firstName}
              label={translate("userManagement.firstName")}
              />
            <TextField
              className="form-control"
              name="lastName"
              value={user.lastName}
              label={translate("userManagement.lastName")}
            />
            <TextField
              name="email"
              label={translate('global.form.email.label')}
              placeholder={translate('global.form.email.placeholder')}
              required
            value={user.email}
          />
            <FormControlLabel control={<Checkbox checked={user.activated} name="activated"/>} label={
            <Translate contentKey="userManagement.activated">Activated</Translate>
            } />
  <%_ if (enableTranslation) { _%>
            <TextField
              select
              label={translate( "userManagement.langKey" )}
            >
              {locales.map(locale =>
              <option value={locale} key={locale}>
                {languages[locale].name}
              </option>
              )}
            </TextField>
  <%_ } _%>
            <TextField
              select
              name="authorities"
              value={user.authorities}

              label={translate( "userManagement.profiles" )}
            >
            {roles.map(role => (
            <option value={role} key={role}>
              {role}
            </option>
            ))}
            </TextField>
          <Button component={Link} to="/admin/user-management"  color="secondary">
            <FontAwesomeIcon icon="arrow-left" />&nbsp;
            <span className="d-none d-md-inline">
              <Translate contentKey="entity.action.back">Back</Translate>
            </span>
          </Button>
          &nbsp;
          <Button color="primary" type="submit" disabled={isInvalid || updating}>
            <FontAwesomeIcon icon="save" />&nbsp;
            <Translate contentKey="entity.action.save">Save</Translate>
          </Button>
        </form>
        }
        </Grid>
      </Grid>
    </div>
  );
};

const mapStateToProps = (storeState: IRootState) => ({
  user: storeState.userManagement.user,
  roles: storeState.userManagement.authorities,
  loading: storeState.userManagement.loading,
  updating: storeState.userManagement.updating
});

const mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };

type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(UserManagementUpdate);
