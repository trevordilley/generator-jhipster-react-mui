<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%#
TODO: MUI
-%>
import React, { useState, useEffect } from 'react';
import { connect } from 'react-redux';
import { Link, RouteComponentProps } from 'react-router-dom';
import { Typography, Button,Paper, Grid, TableContainer, Table, TableBody, TableCell, TableHead, TableRow, Chip } from '@material-ui/core'
import {
  Translate,
  TextFormat,
  JhiPagination,
  JhiItemCount,
  getSortState
} from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import { APP_DATE_FORMAT } from 'app/config/constants';
import { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';
import { getUsers, updateUser } from './user-management.reducer';
import { IRootState } from 'app/shared/reducers';

export interface IUserManagementProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}

export const UserManagement = (props: IUserManagementProps) => {
  const [pagination, setPagination] = useState(getSortState(props.location, ITEMS_PER_PAGE));

  const getAllUsers = () =>
    props.getUsers(pagination.activePage - 1, pagination.itemsPerPage, `${pagination.sort},${pagination.order}`);

  useEffect(() => {
    getAllUsers();
  }, []);

  const sortUsers = () => getAllUsers();

  useEffect(() => {
    sortUsers();
  }, [pagination.activePage, pagination.order, pagination.sort]);

  const sort = p => () => {
    setPagination({
      ...pagination,
      order: pagination.order === 'asc' ? 'desc' : 'asc',
      sort: p
    });
    props.history.push(`${props.location.pathname}?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`);
  };

  const handlePagination = currentPage =>
    setPagination({
      ...pagination,
      activePage: currentPage
    });

  const toggleActive = user => () =>
    props.updateUser({
      ...user,
      activated: !user.activated
    });

  const { users, account, match, totalItems } = props;
  return (
    <div>
      <Typography variant="h2" id="user-management-page-heading">
        <Translate contentKey="userManagement.home.title">Users</Translate>
        <Link to={`${match.url}/new`} className="btn btn-primary float-right jh-create-entity">
          <FontAwesomeIcon icon="plus" /> <Translate contentKey="userManagement.home.createLabel">Create a new user</Translate>
        </Link>
      </Typography>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
          <TableRow>
            <TableCell className="hand" onClick={sort('id')}><Translate contentKey="global.field.id">ID</Translate><FontAwesomeIcon icon="sort" /></TableCell>
            <TableCell className="hand" onClick={sort('login')}><Translate contentKey="userManagement.login">Login</Translate><FontAwesomeIcon icon="sort" /></TableCell>
            <TableCell className="hand" onClick={sort('email')}><Translate contentKey="userManagement.email">Email</Translate><FontAwesomeIcon icon="sort" /></TableCell>
            <TableCell />
            <%_ if (enableTranslation) { _%>
            <TableCell className="hand" onClick={sort('langKey')}><Translate contentKey="userManagement.langKey">Lang Key</Translate><FontAwesomeIcon icon="sort" /></TableCell>
            <%_ } _%>
            <TableCell><Translate contentKey="userManagement.profiles">Profiles</Translate></TableCell>
            <%_ if (databaseType !== 'cassandra') { _%>
            <TableCell className="hand" onClick={sort('createdDate')}><Translate contentKey="userManagement.createdDate">Created Date</Translate><FontAwesomeIcon icon="sort" /></TableCell>
            <TableCell className="hand" onClick={sort('lastModifiedBy')}>
              <Translate contentKey="userManagement.lastModifiedBy">Last Modified By</Translate><FontAwesomeIcon icon="sort" />
            </TableCell>
            <TableCell id="modified-date-sort" className="hand" onClick={sort('lastModifiedDate')}>
              <Translate contentKey="userManagement.lastModifiedDate">Last Modified Date</Translate><FontAwesomeIcon icon="sort" />
            </TableCell>
            <TableCell />
            <%_ } _%>
          </TableRow>
          </TableHead>
          <TableBody>
          {
          users.map((user, i) => (
          <TableRow id={user.login} key={`user-${i}`}>
            <TableCell>
              <Button
                      component={Link} to={`${match.url}/${user.login}`}
              >
                {user.id}
              </Button>
            </TableCell>
            <TableCell>{user.login}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell>
              {user.activated ? (
              <Button  onClick={toggleActive(user) }>
                Activated
              </Button>
              ) : (
              <Button  onClick={toggleActive(user) }>
                Deactivated
              </Button>
              )}
            </TableCell>
            <%_ if (enableTranslation) { _%>
            <TableCell>{user.langKey}</TableCell>
            <%_ } _%>
            <TableCell>
              {
              user.authorities ? (
              user.authorities.map((authority, j) => (
              <div key={`user-auth-${i}-${j}`}>
                <Chip color="primary">{authority}</Chip>
              </div>
              ))) : null
              }
            </TableCell>
            <%_ if (databaseType !== 'cassandra') { _%>
            <TableCell><TextFormat value={user.createdDate} type="date" format={APP_DATE_FORMAT} blankOnInvalid /></TableCell>
            <TableCell>{user.lastModifiedBy}</TableCell>
            <TableCell><TextFormat value={user.lastModifiedDate} type="date" format={APP_DATE_FORMAT} blankOnInvalid /></TableCell>
            <%_ } _%>
            <TableCell className="text-right">
              <div className="btn-group flex-btn-group-container">
                <Button
                        component={Link} to={`${match.url}/${user.login}`}
                >
                  <FontAwesomeIcon icon="eye" /> <span className="d-none d-md-inline" ><Translate contentKey="entity.action.view">View</Translate></span>
                </Button>
                <Button
                        component={Link} to={`${match.url}/${user.login}/edit`}
                >
                  <FontAwesomeIcon icon="pencil-alt" /> <span className="d-none d-md-inline"><Translate contentKey="entity.action.edit">Edit</Translate></span>
                </Button>
                <Button
                        component={Link} to={`${match.url}/${user.login}/delete`}
                        variant="contained" color="secondary" disabled={account.login === user.login}
                >
                <FontAwesomeIcon icon="trash" /> <span className="d-none d-md-inline"><Translate contentKey="entity.action.delete">Delete</Translate></span>
                </Button>
              </div>
            </TableCell>
          </TableRow>
          ))
          }
          </TableBody>
        </Table>

      </TableContainer>
      <%_ if (databaseType !== 'cassandra') { _%>
      <Grid container className={ users && users.length > 0 ? '' : 'd-none' }>
          <Grid item xs={12} className="justify-content-center">
            <JhiItemCount page={pagination.activePage} total={totalItems} itemsPerPage={pagination.itemsPerPage} i18nEnabled />
          </Grid>
          <Grid item xs={12} className="justify-content-center">
            <JhiPagination
              activePage={pagination.activePage}
              onSelect={handlePagination}
              maxButtons={5}
              itemsPerPage={pagination.itemsPerPage}
              totalItems={props.totalItems}
            />
          </Grid>
        </Grid>
      <%_ } _%>
    </div>
  );
};

const mapStateToProps = (storeState: IRootState) => ({
  users: storeState.userManagement.users,
  totalItems: storeState.userManagement.totalItems,
  account: storeState.authentication.account
});

const mapDispatchToProps = { getUsers, updateUser };

type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(UserManagement);
