<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%#
TODO: MUI
-%>
import React, { useState, useEffect } from 'react';
import { connect } from 'react-redux';
import { RouteComponentProps } from 'react-router-dom';
import { Translate, TextFormat, JhiPagination, JhiItemCount, getSortState, IPaginationBaseState } from 'react-jhipster';
import { TextField, Grid, Paper, Typography, Button, TableContainer, Table, TableBody, TableCell, TableHead, TableRow, Chip } from '@material-ui/core'

import { DateTimePicker } from '@material-ui/pickers';
import SortIcon from '@material-ui/icons/Sort';

import { APP_TIMESTAMP_FORMAT } from 'app/config/constants';
import { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';

import { IRootState } from 'app/shared/reducers';
import { getAudits } from '../administration.reducer';

export interface IAuditsPageProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}

const previousMonth = (): string => {
  const now: Date = new Date();
  const fromDate =
    now.getMonth() === 0
      ? new Date(now.getFullYear() - 1, 11, now.getDate())
      : new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
  return fromDate.toISOString().slice(0, 10);
};

const today = (): string => {
  // Today + 1 day - needed if the current day must be included
  const day: Date = new Date();
  day.setDate(day.getDate() + 1);
  const toDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());
  return toDate.toISOString().slice(0, 10);
};

export const AuditsPage = (props: IAuditsPageProps) => {
  const [pagination, setPagination] = useState(getSortState(props.location, ITEMS_PER_PAGE));
  const [fromDate, setFromDate] = useState(previousMonth());
  const [toDate, setToDate] = useState(today());

  useEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    getAllAudits();
  }, [fromDate, toDate, pagination.activePage, pagination.order, pagination.sort]);

  useEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    transition();
  }, [pagination.activePage, pagination.order, pagination.sort]);

  const onChangeFromDate = evt => setFromDate(evt.target.value);

  const onChangeToDate = evt => setToDate(evt.target.value);

  const sort = p => () =>
    setPagination({
      ...pagination,
      order: pagination.order === 'asc' ? 'desc' : 'asc',
      sort: p
    });

  const transition = () => {
    props.history.push(`${props.location.pathname}?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`);
  };

  const handlePagination = currentPage =>
    setPagination({
      ...pagination,
      activePage: currentPage
    });

  const getAllAudits = () => {
    props.getAudits(pagination.activePage - 1, pagination.itemsPerPage, `${pagination.sort},${pagination.order}`, fromDate, toDate);
  };

  const { audits, totalItems } = props;

  return (
    <div>
      <h2 id="audits-page-heading">Audits</h2>
      <span>
        <Translate contentKey="audits.filter.from">from</Translate>
      </span>
      <DateTimePicker value={fromDate} onChange={onChangeFromDate} name="fromDate" id="fromDate" />
      <span>
        <Translate contentKey="audits.filter.to">to</Translate>
      </span>
      <DateTimePicker  value={toDate} onChange={onChangeToDate} name="toDate" id="toDate" />
      {audits && audits.length > 0 ? (
        <TableContainer>
          <TableHead>
            <TableRow>
              <TableCell onClick={sort('auditEventDate')}>
                <Translate contentKey="audits.table.header.date">Date</Translate>
                <SortIcon />
              </TableCell>
              <TableCell onClick={sort('principal')}>
                <Translate contentKey="audits.table.header.principal">User</Translate>
                <SortIcon />
              </TableCell>
              <TableCell onClick={sort('auditEventType')}>
                <Translate contentKey="audits.table.header.status">State</Translate>
                <SortIcon />
              </TableCell>
              <TableCell>
                <Translate contentKey="audits.table.header.data">Extra data</Translate>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {audits.map((audit, i) => (
            <TableRow key={`audit-${i}`}>
              <TableCell>{<TextFormat value={audit.timestamp} type="date" format={APP_TIMESTAMP_FORMAT} />}</TableCell>
              <TableCell>{audit.principal}</TableCell>
              <TableCell>{audit.type}</TableCell>
              <TableCell>
                {audit.data ? audit.data.message : null}
                {audit.data ? audit.data.remoteAddress : null}
              </TableCell>
            </TableRow>
            ))}

          </TableBody>
        </TableContainer>
      ) : (
        <div className="alert alert-warning">
          <Translate contentKey="audits.notFound">No audit found</Translate>
        </div>
      )}
      <div className={audits && audits.length > 0 ? '' : 'd-none'}>
        <Grid container className="justify-content-center">
          <Grid item xs={12}>
            <JhiItemCount page={pagination.activePage} total={totalItems} itemsPerPage={pagination.itemsPerPage} i18nEnabled />
          </Grid>
        </Grid>
        <Grid container className="justify-content-center">
          <Grid item xs={12}>
            <JhiPagination
                    activePage={pagination.activePage}
                    onSelect={handlePagination}
                    maxButtons={5}
                    itemsPerPage={pagination.itemsPerPage}
                    totalItems={props.totalItems}
            />

          </Grid>
        </Grid>
      </div>
    </div>
  );
};

const mapStateToProps = (storeState: IRootState) => ({
  audits: storeState.administration.audits,
  totalItems: storeState.administration.totalItems
});

const mapDispatchToProps = { getAudits };

type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(AuditsPage);
